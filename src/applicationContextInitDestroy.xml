<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.1.xsd
">


<!-- Creación de la Dependencia, esta va a llamarse miInforme y va a ser de tipo Informe el objeto que se va a inyectar, el cual estará en el paquete inversionOfControl. -->
<bean id="miInforme" class="inversionOfControl.Informe"></bean>


<!-- Creación del bean llamado miDirectorEmpleado, que será un objeto de tipo DirectorEmpleado. Spring le proporcionará a mi clase principal este tipo de objeto pues se lo estamos indicando acá utilizando un constructor -->
<!-- los atributos init-method y destroy-method se usan para enlazar este contenedor de beans que crea beans de tipo DirectorEmpleado con los metodos init y destroy establecidos en la clase DirectorEmpleado de modo que se llamen a dichos métodos cuando corresponda y se ejecuten las tareas que están dentro de su cuerpo -->
<bean id="miDirectorEmpleado" class="inversionOfControl.DirectorEmpleado" init-method="init" destroy-method="destroy">
	
	<constructor-arg ref="miInforme"></constructor-arg>									<!-- Acá se define que Spring además utiliza la inyección de una dependencia llamada miInforme de tipo Informe a la clase DirectorEmpleado para proporcionarle la capacidad de trabajar con objetos de este tipo. La clase DirectorEmpleado por su parte presenta un constructor que le permite inicializar mediante este constructor a un ojeto de tipo CreacionInformes, que es la interfaz padre de Informes, por tanto por eso puede contener un objeto de la clase Informe hija  -->
	
</bean>









</beans>